# Gate & Visitor Management


This module handles all operations related to society security, including managing staff, tracking attendance, and logging visitor entries and exits.


**Authorization**: Endpoints in this module will require specific roles (Admin, Guard, or Resident), which will be checked via the Bearer Token.

## 1. Staff

Endpoints for managing society staff like guards, housekeepers, and electricians.

### List All Staff

> Successful Response (200 OK):

```json
{
  "data": [
    {
      "id": "staff_uuid_1",
      "name": "Ramesh Kumar",
      "approvedBy": "Support - Ops 1.5A",
      "createdBy": "System (Society Admin)",
      "contact": "9811122233",
      "type": "Security",
      "permanentAddress": "Village Rampur, UP",
      "companyId: "GTY-SC-001",
      "status": "Current"
    }
  ]
}
```

### **GET** `/staff`

- **Description:** Retrieves a list of all staff members. This is used to populate the "Manage Staff/Security" page.
- **Authorization:**  Bearer Token required (Admin role only).
- **Query Parameters (Optional):**
  - `?status=Current`: Filters by Current, Old, or Blacklisted.
  - `?search=Ramesh`: Filters by name or contact number.
  - `?page=1&limit=10`: For pagination.

### Request Headers

| Header          | Type   | Description                                                                          |
| :-------------- | :----- | :----------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of an `Admin` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Response

| Parameter                 | Type            | Description                                                          |
| :------------------------ | :-------------- | :------------------------------------------------------------------- |
| `data`                    | Array of objects   | An array of staff member objects.                                    |
| `data[].id`               | UUID            | The unique identifier for the staff member.                          |
| `data[].name`             | String          | The full name of the staff member.                                   |
| `data[].approvedBy`       | String          | Details of the user/system that approved the staff member.           |
| `data[].createdBy`        | String          | Details of the user/system that created the record.                  |
| `data[].contact`          | String          | The contact phone number of the staff member.                        |
| `data[].type`             | String          | The type or role of the staff (e.g., `Security`).                    |
| `data[].permanentAddress` | String          | The permanent address of the staff member.                           |
| `data[].companyId`        | String          | An identifier for the company the staff member is associated with.   |
| `data[].status`           | String          | The current employment status (e.g., `Current`).                     |
| `pagination`              | Object          | An object containing pagination details.                             |
| `pagination.total`        | Integer         | The total number of records matching the query.                      |
| `pagination.page`         | Integer         | The current page number.                                             |
| `pagination.limit`        | Integer         | The number of items requested per page.                              |
| `pagination.totalPages`   | Integer         | The total number of pages available.                                 |


### Add New Staff


> Request Body:

```json
{
  "avatar": "file_path",
  "fullName": "Suresh Yadav",
  "phoneNumber": "9786543210",
  "permanentAddress": "New Minal Residency",
  "staffType": "Security",  // "maid", "driver", "Electrician"
  "password": "default_staff_password",
  "companyName": "GTY-1234",
  "idType": "Aadhar",    // "Pan", "Voter Id"
  "idFile": "file_path"
}
```

> Successful Response (201 Created):

```json
{
  "message": "Staff member added successfully.",
  "staffId": "new_staff_uuid"
}
```

### **POST** `/staff`


- **Description:** Creates a new staff member in the society.
- **Authorization:**  Bearer Token required (Admin role only).

### Request Body

| Parameter          | Type   | Description                                                                   |
| :----------------- | :----- | :---------------------------------------------------------------------------- |
| `avatar`           | File   | **Required.** The profile picture of the staff member.                        |
| `fullName`         | String | **Required.** The full name of the new staff member.                          |
| `phoneNumber`      | String | **Required.** The contact phone number for the new staff member.              |
| `permanentAddress` | String | **Required.** The permanent address of the new staff member.                  |
| `staffType`        | String | **Required.** The type of staff (e.g., `Security`, `Maid`, `Driver`).         |
| `password`         | String | **Required.** A password for the staff member's account.                      |
| `companyName`      | String | **Required.** The name of the company the staff is associated with.           |
| `idType`           | String | **Required.** The type of identification document (e.g., `Aadhar`, `Pan`).      |
| `idFile`           | File   | **Required.** The scanned copy of the identification document.                |

### Response

| Parameter | Type   | Description                                                |
| :-------- | :----- | :--------------------------------------------------------- |
| `message` | String | A confirmation message indicating success.                 |
| `staffId` | UUID   | The unique identifier for the newly created staff member.  |


## 2. Visitors

Endpoints for managing the log of all visitors.
