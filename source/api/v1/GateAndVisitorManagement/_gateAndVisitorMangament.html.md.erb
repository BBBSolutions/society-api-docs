# Gate & Visitor Management


This module handles all operations related to society security, including managing staff, tracking attendance, and logging visitor entries and exits.


**Authorization**: Endpoints in this module will require specific roles (Admin, Guard, or Resident), which will be checked via the Bearer Token.



## 1. List All Staff

Endpoints for managing society staff like guards, housekeepers, and electricians.

> Successful Response (200 OK):

```json
{
  "data": [
    {
      "id": "staff_uuid_1",
      "name": "Ramesh Kumar",
      "approvedBy": "Support - Ops 1.5A",
      "createdBy": "System (Society Admin)",
      "contact": "9811122233",
      "type": "Security",
      "permanentAddress": "Village Rampur, UP",
      "companyId: "GTY-SC-001",
      "status": "Current"
    }
  ]
}
```

### **GET** `/staff`

- **Description:** Retrieves a list of all staff members. This is used to populate the "Manage Staff/Security" page.
- **Authorization:**  Bearer Token required (Admin role only).
- **Query Parameters (Optional):**
  - `?status=Current`: Filters by Current, Old, or Blacklisted.
  - `?search=Ramesh`: Filters by name or contact number.
  - `?page=1&limit=10`: For pagination.

### Request Headers

| Header          | Type   | Description                                                                          |
| :-------------- | :----- | :----------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of an `Admin` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Response

| Parameter                 | Type            | Description                                                          |
| :------------------------ | :-------------- | :------------------------------------------------------------------- |
| `data`                    | Array of objects   | An array of staff member objects.                                    |
| `data[].id`               | UUID            | The unique identifier for the staff member.                          |
| `data[].name`             | String          | The full name of the staff member.                                   |
| `data[].approvedBy`       | String          | Details of the user/system that approved the staff member.           |
| `data[].createdBy`        | String          | Details of the user/system that created the record.                  |
| `data[].contact`          | String          | The contact phone number of the staff member.                        |
| `data[].type`             | String          | The type or role of the staff (e.g., `Security`).                    |
| `data[].permanentAddress` | String          | The permanent address of the staff member.                           |
| `data[].companyId`        | String          | An identifier for the company the staff member is associated with.   |
| `data[].status`           | String          | The current employment status (e.g., `Current`).                     |
| `pagination`              | Object          | An object containing pagination details.                             |
| `pagination.total`        | Integer         | The total number of records matching the query.                      |
| `pagination.page`         | Integer         | The current page number.                                             |
| `pagination.limit`        | Integer         | The number of items requested per page.                              |
| `pagination.totalPages`   | Integer         | The total number of pages available.                                 |


## 2. Add New Staff

> Request Body:

```json
{
  "avatar": "file_path",
  "fullName": "Suresh Yadav",
  "phoneNumber": "9786543210",
  "permanentAddress": "New Minal Residency",
  "staffType": "Security",  // "maid", "driver", "Electrician"
  "password": "default_staff_password",
  "companyName": "GTY-1234",
  "idType": "Aadhar",    // "Pan", "Voter Id"
  "idFile": "file_path"
}
```

> Successful Response (201 Created):

```json
{
  "message": "Staff member added successfully.",
  "staffId": "new_staff_uuid"
}
```

### **POST** `/staff`


- **Description:** Creates a new staff member in the society.
- **Authorization:**  Bearer Token required (Admin role only).

### Request Body

| Parameter          | Type   | Description                                                                   |
| :----------------- | :----- | :---------------------------------------------------------------------------- |
| `avatar`           | File   | **Required.** The profile picture of the staff member.                        |
| `fullName`         | String | **Required.** The full name of the new staff member.                          |
| `phoneNumber`      | String | **Required.** The contact phone number for the new staff member.              |
| `permanentAddress` | String | **Required.** The permanent address of the new staff member.                  |
| `staffType`        | String | **Required.** The type of staff (e.g., `Security`, `Maid`, `Driver`).         |
| `password`         | String | **Required.** A password for the staff member's account.                      |
| `companyName`      | String | **Required.** The name of the company the staff is associated with.           |
| `idType`           | String | **Required.** The type of identification document (e.g., `Aadhar`, `Pan`).      |
| `idFile`           | File   | **Required.** The scanned copy of the identification document.                |

### Response

| Parameter | Type   | Description                                                |
| :-------- | :----- | :--------------------------------------------------------- |
| `message` | String | A confirmation message indicating success.                 |
| `staffId` | UUID   | The unique identifier for the newly created staff member.  |



## 3. Get Visitor Log

> Successful Response (200 OK):

```json
{
  "data": [
    {
      "id": "visitor_log_uuid_1",
      "flatNo": "B-015",
      "visitorName": "Aditya Mishra",
      "visitorPhone": "9880771124",
      "visitorType": "Cab (Ola)",  // "Guest", "Delivery", "Maid"
      "entryArea": "Main Gate",   // "Side Gate"
      "approvedBy": "Guard",     // "Resident"
      "expectedInTime": "2025-10-04T14:30:00Z"
      "expectedOutTime": "2025-10-04T14:30:00Z"
      "creationMode": "Guard"  // "App", "Resident"
    }
  ]
}
```

Endpoints for managing the log of all visitors.

### **GET** `/visitors`

- **Description:** Retrieves the visitor log, used to populate the "Visitor Records" page.
- **Authorization:**  arer Token required (Admin or Guard role).


### Request Headers

| Header          | Type   | Description                                                                          |
| :-------------- | :----- | :----------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of an `Admin` or `Guard` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |


### Query Parameters

| Parameter | Type    | Description                                                                     |
| :-------- | :------ | :------------------------------------------------------------------------------ |
| `status`  | String  | *Optional.* Filters visitors by status (e.g., `Current`, `Past`, `Upcoming`, `Denied`). |
| `date`    | String  | *Optional.* Filters visitors for a specific date in `YYYY-MM-DD` format.        |
| `gateId`  | UUID    | *Optional.* Filters visitors who entered through a specific gate.               |
| `search`  | String  | *Optional.* Searches by visitor name, phone number, or flat number.             |
| `page`    | Integer | *Optional.* The page number for pagination. Defaults to `1`.                    |
| `limit`   | Integer | *Optional.* The number of items per page. Defaults to `10`.                     |


### Response

| Parameter                 | Type          | Description                                                                 |
| :------------------------ | :------------ | :-------------------------------------------------------------------------- |
| `data`                    | Array of objects | An array of visitor log objects.                                            |
| `data[].id`               | UUID          | The unique identifier for the visitor log entry.                            |
| `data[].flatNo`           | String        | The flat number the visitor is associated with.                             |
| `data[].visitorName`      | String        | The full name of the visitor.                                               |
| `data[].visitorPhone`     | String        | The contact phone number of the visitor.                                    |
| `data[].visitorType`      | String        | The type of visitor (e.g., `Cab (Ola)`, `Guest`, `Delivery`).               |
| `data[].entryArea`        | String        | The gate or area of entry (e.g., `Main Gate`).                              |
| `data[].approvedBy`       | String        | The role that approved the visitor's entry (e.g., `Guard`, `Resident`).     |
| `data[].expectedInTime`   | DateTime      | The expected entry time for the visitor.                                    |
| `data[].expectedOutTime`  | DateTime      | The expected exit time for the visitor.                                     |
| `data[].creationMode`     | String        | How the visitor entry was created (e.g., `Guard`, `App`).                   |
| `pagination`              | Object        | An object containing pagination details.                                    |
| `pagination.total`        | Integer       | The total number of records matching the query.                             |
| `pagination.page`         | Integer       | The current page number.                                                    |
| `pagination.limit`        | Integer       | The number of items requested per page.                                     |
| `pagination.totalPages`   | Integer       | The total number of pages available.                                        |


## 4. Pre-Approve a Visitor (Resident Action)

### POST `/visitors/pre-approve`


> Request Body:

```json
{
  "visitorName": "Rahul Sharma",
  "visitorType": "Guest",
  "expectedAt": "2025-09-14T00:00:00Z"
}
```

> Successful Response (201 Created):

```json
{
  "message": "Visitor pre-approved successfully."
}
```

- **Description:** Allows a resident to add an expected visitor to the log, creating an "Upcoming" entry.
- **Authorization:**  Bearer Token required (Resident role).

### Request Headers

| Header          | Type   | Description                                                                            |
| :-------------- | :----- | :------------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of a `Resident` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Request Body

| Parameter     | Type     | Description                                                         |
| :------------ | :------- | :------------------------------------------------------------------ |
| `visitorName` | String   | **Required.** The full name of the expected visitor.                |
| `visitorType` | String   | **Required.** The type of visitor (e.g., `Guest`, `Delivery`).      |
| `expectedAt`  | DateTime | **Required.** The expected date and time of arrival in ISO format.  |


### Response

| Parameter | Type   | Description                                                        |
| :-------- | :----- | :----------------------------------------------------------------- |
| `message` | String | A confirmation that the visitor was successfully pre-approved.     |



## 5. Mark Visitor Exit (Guard Action)


> Successful Response (201 Created):

```json
{
  "message": "Visitor exit marked successfully.",
  "visitor": {
    "id": "d8f8f8f8-4c4c-4c4c-4c4c-121212121212",
    "status": "Past",
    "actualOutTime": "2025-10-07T04:10:13Z"
  }
}
```

### PUT `/visitors/:id/exit`

- **Description:** Allows a guard to mark a visitor as having left the society.
- **Authorization:** Bearer Token required (Guard role).

### Request Headers

| Header          | Type   | Description                                                                          |
| :-------------- | :----- | :----------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of a `Guard` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Path Parameters

| Parameter | Type | Description                                          |
| :-------- | :--- | :--------------------------------------------------- |
| `id`      | UUID | **Required.** The ID of the visitor log entry to update. |


### Response

| Parameter              | Type     | Description                                                        |
| :--------------------- | :------- | :----------------------------------------------------------------- |
| `message`              | String   | A confirmation that the visitor's exit was successfully marked.    |
| `visitor`              | Object   | The updated visitor log object.                                    |
| `visitor.id`           | UUID     | The unique identifier for the visitor entry.                       |
| `visitor.status`       | String   | The updated status, which will now be "Past".                      |
| `visitor.actualOutTime`| DateTime | The timestamp recorded when the visitor exited.                    |


## 6. Get Parcel Log

> Successful Response (201 Created):

```json
{
  "data": [
    {
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "flatNo": "C-102",
      "provider": "Amazon",
      "receivedAt": "2025-10-06T11:05:14Z",
      "status": "At Gate"
    },
    {
      "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
      "flatNo": "A-401",
      "provider": "BlueDart",
      "receivedAt": "2025-10-06T14:22:05Z",
      "status": "At Gate"
    }
  ],
  "pagination": {
    "total": 7,
    "page": 1,
    "limit": 10,
    "totalPages": 1
  }
}
```


Endpoint for managing parcels received at the gate.

### GET `/parcels`


- **Description:** Retrieves a list of all parcels. This is for the "Parcels" tab on the Visitor Records page.
- **Authorization:** Bearer Token required (Admin or Guard role).  


### Request Headers

| Header          | Type   | Description                                                                                    |
| :-------------- | :----- | :--------------------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of an `Admin` or `Guard` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Query Parameters

| Parameter | Type    | Description                                                                     |
| :-------- | :------ | :------------------------------------------------------------------------------ |
| `status`  | String  | *Optional.* Filters parcels by status (e.g., `At Gate`, `Collected`).           |
| `search`  | String  | *Optional.* Searches by flat number or provider name.                           |
| `date`    | String  | *Optional.* Filters parcels received on a specific date in `YYYY-MM-DD` format. |
| `gateId`  | UUID    | *Optional.* Filters parcels received at a specific gate.                        |
| `page`    | Integer | *Optional.* The page number for pagination. Defaults to `1`.                    |
| `limit`   | Integer | *Optional.* The number of items per page. Defaults to `10`.                     |


### Response

| Parameter                | Type            | Description                                                        |
| :----------------------- | :-------------- | :----------------------------------------------------------------- |
| `data`                   | Array of objects| An array of parcel objects.                                        |
| `data[].id`              | UUID            | The unique identifier for the parcel.                              |
| `data[].flatNo`          | String          | The flat number the parcel is addressed to.                        |
| `data[].provider`        | String          | The delivery service or provider (e.g., `Amazon`).                 |
| `data[].receivedAt`      | DateTime        | The timestamp when the parcel was received.                        |
| `data[].status`          | String          | The current status of the parcel (e.g., `At Gate`).                |
| `pagination`             | Object          | An object containing pagination details.                           |
| `pagination.total`       | Integer         | The total number of records matching the query.                    |
| `pagination.page`        | Integer         | The current page number.                                           |
| `pagination.limit`       | Integer         | The number of items requested per page.                            |
| `pagination.totalPages`  | Integer         | The total number of pages available.                               |


## 7. Get Attendance Summary


> Successful Response (201 Created):

```json
{
  "data": [
    {
      "staffId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "Ramesh Kumar",
      "type": "Security",
      "presents": 25,
      "absents": 5,
      "totalDays": 30
    },
    {
      "staffId": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
      "name": "Sunita Devi",
      "type": "Housekeeping",
      "presents": 28,
      "absents": 2,
      "totalDays": 30
    }
  ],
  "pagination": {
    "total": 4,
    "page": 1,
    "limit": 10,
    "totalPages": 1
  }
}
```

Endpoint for managing staff and guard attendance.


### GET `/attendance/summary`


- **Description:** Retrieves the attendance summary for all staff for a given month. This powers the main "Attendance" page.
- **Authorization:** Bearer Token required (Admin role only).

### Request Headers

| Header          | Type   | Description                                                                          |
| :-------------- | :----- | :----------------------------------------------------------------------------------- |
| `Authorization` | String | **Required.** The JWT token of an `Admin` user, prefixed with "Bearer " (e.g., `Bearer <token>`). |

### Query Parameters

| Parameter | Type    | Description                                                                     |
| :-------- | :------ | :------------------------------------------------------------------------------ |
| `month`   | String  | **Required.** The month to fetch the summary for, in `YYYY-MM` format (e.g., `2025-10`). |
| `page`    | Integer | *Optional.* The page number for pagination. Defaults to `1`.                    |
| `limit`   | Integer | *Optional.* The number of items per page. Defaults to `10`.                     |

### Response

| Parameter                 | Type            | Description                                                                 |
| :------------------------ | :-------------- | :-------------------------------------------------------------------------- |
| `data`                    | Array of objects| An array of staff attendance summary objects.                               |
| `data[].staffId`          | UUID            | The unique identifier for the staff member.                                 |
| `data[].name`             | String          | The full name of the staff member.                                          |
| `data[].type`             | String          | The role or type of the staff (e.g., `Security`).                           |
| `data[].presents`         | Integer         | The total number of days the staff member was present in the given month.   |
| `data[].absents`          | Integer         | The total number of days the staff member was absent in the given month.    |
| `data[].totalDays`        | Integer         | The total number of days in the given month.                                |
| `pagination`              | Object          | An object containing pagination details.                                    |
| `pagination.total`        | Integer         | The total number of records matching the query.                             |
| `pagination.page`         | Integer         | The current page number.                                                    |
| `pagination.limit`        | Integer         | The number of items requested per page.                                     |
| `pagination.totalPages`   | Integer         | The total number of pages available.                                        |


## 8. Mark Attendance

> Request Body:

```json
{
  "staffId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
  "date": "2025-10-07",
  "status": "Present"
}
```

> Successful Response (201 Created):

```json
{
  "message": "Attendance marked successfully."
}
```

> Error Response (403 Forbidden - Guard trying to mark past date):

```json
{
  "error": "You can only mark attendance for the current day."
}
```

### POST `/attendance`

- **Description:** Marks the attendance for a specific staff member on a specific day. Corresponds to the "Mark Today's Attendance" action.
- **Authorization:** Bearer Token required (Admin or Guard role).

Backend Logic:

If the user's role is Guard, the date in the request body must be the current date. The API will reject requests for past or future dates from a Guard.

If the user's role is Admin, they can use this endpoint for the current day. To modify past records, they must use the PUT /attendance endpoint.

### Request Body

| Parameter | Type   | Description                                                               |
| :-------- | :----- | :------------------------------------------------------------------------ |
| `staffId` | UUID   | **Required.** The unique identifier of the staff member.                  |
| `date`    | String | **Required.** The date for attendance in `YYYY-MM-DD` format.             |
| `status`  | String | **Required.** The attendance status (e.g., `Present`, `Absent`).          |

### Response

| Parameter | Type   | Description                                |
| :-------- | :----- | :----------------------------------------- |
| `message` | String | A confirmation that attendance was marked. |


## 9. Update Past Attendance (Admin Only)

> Request Body:

```json
{
  "staffId": "staff_uuid_1",
  "date": "2025-10-03",
  "status": "On Leave",
  "remark": "Approved leave application received."
}
```

> Successful Response (201 Created):

```json
{
  "message": "Attendance record updated successfully."
}
```

### PUT `/attendance`

- **Description:** Updates the status of a specific, existing attendance record. This is the admin-only action to correct a missed or incorrect entry from a previous day.
- **Authorization:** Bearer Token required (Admin role only).

### Request Body

| Parameter | Type   | Description                                                        |
| :-------- | :----- | :----------------------------------------------------------------- |
| `status`  | String | **Required.** The new attendance status (e.g., `On Leave`, `Present`). |
| `staffId` | UUID   | **Required.** The ID of the staff member whose record is being updated.       |
| `date`    | String | **Required.** The date of the attendance record to update in `YYYY-MM-DD` format. |
| `remark`  | String | **Required.** A remark or reason for the update. 

### Response

| Parameter | Type   | Description                                              |
| :-------- | :----- | :------------------------------------------------------- |
| `message` | String | A confirmation that the record was updated successfully. |

## 10. Generate Attendance Report


### GET `/staff/:staffId/attendance/report`


- **Description:** Generates a downloadable attendance report (e.g., PDF or CSV) for a specific staff member over a date range.
- **Authorization:** Bearer Token required (Admin role only).

### Path Parameters

| Parameter | Type | Description                           |
| :-------- | :--- | :------------------------------------ |
| `staffId` | UUID | **Required.** The ID of the staff member. |

### Query Parameters

| Parameter   | Type   | Description                                                            |
| :---------- | :----- | :--------------------------------------------------------------------- |
| `startDate` | String | **Required.** The start date for the report in `YYYY-MM-DD` format.      |
| `endDate`   | String | **Required.** The end date for the report in `YYYY-MM-DD` format.        |



### Successful Response (200 OK)

The response body contains the raw file data for the generated report.

* **Content-Type**: `application/pdf` or `text/csv`
* **Body**: The binary data of the requested report file, which should trigger a download in the browser.

